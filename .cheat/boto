### Deleting a Bucket
# All of the keys in a bucket must be deleted before the bucket itself can be deleted:

# Boto 2.x
for key in bucket:
    key.delete()
bucket.delete()

# Boto 3
for key in bucket.objects.all():
    key.delete()
bucket.delete()


### Iteration of Buckets and Keys
# Bucket and key objects are no longer iterable, but now provide collection attributes which can be iterated:

# Boto 2.x
for bucket in s3_connection:
  for key in bucket:
    print(key.name)

# Boto 3
for bucket in s3.buckets.all():
  for key in bucket.objects.all():
    print(key.key)


### Access Controls
# Getting and setting canned access control values in Boto 3 operates on an ACL resource object:

# Boto 2.x
bucket.set_acl('public-read')
key.set_acl('public-read')

# Boto 3
bucket.Acl().put(ACL='public-read')
obj.Acl().put(ACL='public-read')

# It's also possible to retrieve the policy grant information:

# Boto 2.x
acp = bucket.get_acl()
for grant in acp.acl.grants:
    print(grant.display_name, grant.permission)

# Boto 3
acl = bucket.Acl()
for grant in acl.grants:
    print(grant['Grantee']['DisplayName'], grant['Permission'])
Boto 3 lacks the grant shortcut methods present in Boto 2.x, but it is still fairly simple to add grantees:

# Boto 2.x
bucket.add_email_grant('READ', 'user@domain.tld')

# Boto 3
bucket.Acl.put(GrantRead='emailAddress=user@domain.tld')


### Key Metadata
# It's possible to set arbitrary metadata on keys:

# Boto 2.x
key.set_metadata('meta1', 'This is my metadata value')
print(key.get_metadata('meta1'))

# Boto 3
key.put(Metadata={'meta1': 'This is my metadata value'})
print(key.metadata['meta1'])


### Managing CORS Configuration
# Allows you to manage the cross-origin resource sharing configuration for S3 buckets:

# Boto 2.x
cors = bucket.get_cors()

config = CORSConfiguration()
config.add_rule('GET', '*')
bucket.set_cors(config)

bucket.delete_cors()

# Boto 3
cors = bucket.Cors()

config = {
  'CORSRules': [
    {
      'AllowedMethods': ['GET'],
      'AllowedOrigins': ['*']
    }
  ]
}
cors.put(CORSConfiguration=config)

cors.delete()

