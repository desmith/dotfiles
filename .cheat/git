### Config ###
# To set your identity:
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com

# To set your editor:
git config --global core.editor emacs

# To enable color:
git config --global color.ui true

### Add ###
# To stage all changes for commit:
git add --all


### Errors
# if you get this error:
# fatal: unable to create thread: Resource temporarily unavailable
# say on a remote shared host with limited memory...

# run these commands:
git config --global pack.windowMemory "100m"
git config --global pack.packSizeLimit "100m"
git config --global pack.threads "1"


# Git is hard: screwing up is easy, and figuring out how to fix your mistakes is fucking impossible. Git documentation has this chicken and egg problem where you can't search for how to get yourself out of a mess, unless you already know the name of the thing you need to know about in order to fix your problem.

# So here are some bad situations I've gotten myself into, and how I eventually got myself out of them in plain english*.


### Oh No, I did something terribly wrong, please tell me git has a magic time machine!?!


git reflog
# you will see a list of every thing you've done in git, across all branches!
# each one has an index HEAD@{index}
# find the one before you broke everything
git reset HEAD@{index}
# magic time machine

# You can use this to get back stuff you accidentally deleted, or just to remove some stuff you tried that broke the repo, or to recover after a bad merge, or just to go back to a time when things actually worked. I use reflog A LOT. Mega hat tip to the many many many many many people who suggested adding it!



### Oh No, I committed and immediately realized I need to make one small change!


# make your change
git add . # or add individual files
git commit --amend
# follow prompts to change or keep the commit message
# now your last commit contains that change!

# This usually happens to me if I commit, then run tests/linters... and FML, I didn't put a space after the equals sign. You could also make the change as a new commit and then do rebase -i in order to squash them both together, but this is about a million times faster.



### Oh No, I need to change the message on my last commit!


git commit --amend
# follow prompts to change the commit message

# Stupid commit message formatting requirements.



### Oh No, I accidentally committed something to master that should have been on a brand new branch!


# create a new branch from the current state of master
git branch some-new-branch-name
# remove the commit from the master branch
git reset HEAD~ --hard
git checkout some-new-branch-name
# your commit lives in this branch now :)

# Note: this doesn't work if you've already pushed to origin, and if you tried other things first, you might need to git reset HEAD@{number} instead of HEAD~. Infinite sadness. Also, many many many people suggested an awesome way to make this shorter that I didn't know myself. Thank you all!



### Oh No, I accidentally committed to the wrong branch!


# undo the last commit, but leave the changes available
git reset HEAD~ --soft
git stash
# move to the correct branch
git checkout name-of-the-correct-branch
git stash pop
git add . # or add individual files
git commit -m "your message here"
# now your changes are on the correct branch

# A lot of people have suggested using cherry-pick for this situation too, so take your pick on whatever one makes the most sense to you!

git checkout name-of-the-correct-branch
# grab the last commit to master
git cherry-pick master
# delete it from master
git checkout master
git reset HEAD~ --hard





### Oh No, I tried to run a diff but nothing happened?!


git diff --staged

# Git won't do a diff of files that have been add-ed to your staging area without this flag. File under ¯\_(ツ)_/¯ (yes, this is a feature, not a bug, but it's baffling and non-obvious the first time it happens to you!)


# OK, I give up.


cd ..
sudo rm -r borked-git-repo-dir
git clone https://some.github.url/borked-git-repo-dir.git
cd borked-git-repo-dir



### Commit ###
# To commit staged changes
git commit -m "Your commit message"

# To edit previous commit message
git commit --amend

# Git commit in the past
git commit --date="`date --date='2 day ago'`"
git commit --date="Jun 13 18:30:25 IST 2015"
# more recent versions of Git also support --date="2 days ago" directly

# To change the date of an existing commit
git filter-branch --env-filter \
    'if [ $GIT_COMMIT = 119f9ecf58069b265ab22f1f97d2b648faf932e0 ]
     then
         export GIT_AUTHOR_DATE="Fri Jan 2 21:38:53 2009 -0800"
         export GIT_COMMITTER_DATE="Sat May 19 01:01:01 2007 -0700"
     fi'


### Diff ###
# compare two branches
git diff <branch1> <branch2>

# example:
git diff checkbox-list master


### Tags ###
# Listing the available tags in Git is straightforward.
git tag

# You can also search for tags with a particular pattern.
git tag -l "v1.8.5*"

# v1.8.5
# v1.8.5-rc0
# v1.8.5-rc1
# v1.8.5-rc2
# v1.8.5-rc3
# v1.8.5.1
# v1.8.5.2
# v1.8.5.3
# v1.8.5.4
# v1.8.5.5


# Creating an annotated tag in Git is simple.
# The easiest way is to specify -a when you run the tag command:
git tag -a v1.4 -m "my version 1.4"


# You can see the tag data along with the commit that was tagged by using the git show command:
git show v1.4

# format output
git log --pretty=oneline

# Tagging later
git tag -a v1.2 9fceb02

# push single tag
git push origin v1.5

# push multiple tags
git push origin --tags


# To removed staged and working directory changes
git reset --hard

# To go 2 commits back
git reset --hard HEAD~2

# To remove untracked files
git clean -f -d

# To remove untracked and ignored files
git clean -f -d -x

# To push to the tracked master branch:
git push origin master

# To push to a specified repository:
git push git@github.com:username/project.git


### Branches ###

# To delete the branch "branch_name"
git branch -D branch_name

# To make an exisiting branch track a remote branch
git branch -u upstream/foo

# To see who commited which line in a file
git blame filename

# To sync a fork with the master repo:
git remote add upstream git@github.com:name/repo.git    # Set a new repo
git remote -v                                           # Confirm new remote repo
git fetch upstream                                      # Get branches
git branch -va                                          # List local - remote branches
git checkout master                                     # Checkout local master branch
git checkout -b new_branch                              # Create and checkout a new branch
git merge upstream/master                               # Merge remote into local repo
git show 83fb499                                        # Show what a commit did.
git show 83fb499:path/fo/file.ext                       # Shows the file as it appeared at 83fb499.
git diff branch_1 branch_2                              # Check difference between branches
git log                                                 # Show all the commits
git status                                              # Show the changes from last commit

# Commit history of a set of files
git log --pretty=email --patch-with-stat --reverse --full-index -- Admin\*.py > Sripts.patch

# Import commits from another repo
git --git-dir=../some_other_repo/.git format-patch -k -1 --stdout <commit SHA> | git am -3 -k

# View commits that will be pushed
git log @{u}..

# View changes that are new on a feature branch
git log -p feature --not master
git diff master...feature

# Interactive rebase for the last 7 commits
git rebase -i @~7

# Diff files WITHOUT considering them a part of git
# This can be used to diff files that are not in a git repo!
git diff --no-index path/to/file/A path/to/file/B

# To pull changes while overwriting any local commits
git fetch --all
git reset --hard origin/master

# Automatic prune with git fetch or pull
git config remote.origin.prune true

# Perform a shallow clone to only get latest commits
# (helps save data when cloning large repos)
git clone --depth 1 <remote-url>

# To unshallow a clone
git pull --unshallow

# if you get this error:
<projectfolder> already exists in the index

# do this:
git ls-files --stage projectfolder
git rm --cached <projectfolder>


### Create new branch from recent (uncommited) changes:
git checkout -b <new-branch>

# This will leave your current branch as is, create and checkout a new branch and keep all your changes. You can then make a commit with:

git add <files>

# and commit to your new branch with:

git commit

# The changes in the working directory and changes staged in index do not belong to any branch yet. This changes where those changes would end in.

#You don't reset your original branch, it stays as it is. The last commit on <old-branch> will still be the same. Therefore you checkout -b and then commit.

### stash diffs
# See the most recent stash:
git stash show -p

# See an arbitrary stash:
# stash@{0} is the default; you only need an argument if you want to look at previous stashes
git stash show -p stash@{1}


# to compare the stash with any branch you can use:
git diff stash@{0} <branch>

# To see all changes compared to branch master.
git diff stash@{0} master



# adding external submodule
git submodule add <url_to_repo>

# Update all your submodules
git submodule update --init --recursive

# hard reset from origin/master
git fetch origin
git reset --hard origin/master


# show files included in a commit:
git show --name-only {commit}

# show actual changes in a commit:
git diff {commit}~ {commit}

# only download a particular branch, and only the most recent commit (good for docker images)
git clone --branch 8.x-3.x --single-branch --depth 1 <repo>

