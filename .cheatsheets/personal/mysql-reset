## Log on to your system as the Unix user that the MySQL server runs as (for example, mysql).

# Stop the MySQL server if it is running. Locate the .pid file that contains the server's process ID. The exact location and name of this file depend on your distribution, host name, and configuration. Common locations are /var/lib/mysql/, /var/run/mysqld/, and /usr/local/mysql/data/. Generally, the file name has an extension of .pid and begins with either mysqld or your system's host name.

# Stop the MySQL server by sending a normal kill (not kill -9) to the mysqld process. Use the actual path name of the .pid file in the following command:

$ kill `cat /mysql-data-directory/host_name.pid`

# Use backticks (not forward quotation marks) with the cat command. These cause the output of cat to be substituted into the kill command.

# Create a text file containing the password-assignment statement on a single line. Replace the password with the password that you want to use.


ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass';

# Save the file. This example assumes that you name the file /home/me/mysql-init. The file contains the password, so do not save it where it can be read by other users. If you are not logged in as mysql (the user the server runs as), make sure that the file has permissions that permit mysql to read it.

# Start the MySQL server with the init_file system variable set to name the file:

$ mysqld --init-file=/home/me/mysql-init &

# The server executes the contents of the file named by the init_file system variable at startup, changing the 'root'@'localhost' account password.

# Other options may be necessary as well, depending on how you normally start your server. For example, --defaults-file may be needed before the init_file argument.

# After the server has started successfully, delete /home/me/mysql-init.

# You should now be able to connect to the MySQL server as root using the new password. Stop the server and restart it normally.

### Generic Instructions (mysql 8.0)


1) Stop the MySQL server if necessary
2) Restart it with the --skip-grant-tables option
3) Connect to the MySQL server using the mysql client; no password is necessary because the server was started with --skip-grant-tables:

shell> mysql

4)  In the mysql client, tell the server to reload the grant tables so that account-management statements work:

mysql> FLUSH PRIVILEGES;

5) Then change the 'root'@'localhost' account password. 

mysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass';

6) Stop the server and restart it normally (without the --skip-grant-tables option and without enabling the skip_networking system variable).
You should now be able to connect to the MySQL server as root using the new password. 